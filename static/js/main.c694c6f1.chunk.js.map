{"version":3,"sources":["components/header/index.js","components/header/header.jsx","helpers/values.js","components/task/task.jsx","components/task/index.js","components/task-list/index.js","components/task-list/task-list.jsx","components/filters/index.js","components/filters/filters.jsx","components/footer/index.js","components/footer/footer.jsx","components/app/index.js","components/app/app.jsx","index.jsx"],"names":["Header","state","label","onLabelChange","event","setState","target","value","onKeyDown","addItem","props","code","this","className","placeholder","onChange","Component","values","filters","all","active","completed","classNames","require","Task","addingDate","id","done","editing","itemDestroy","onToggleDone","itemEdit","taskClass","type","checked","onClick","formatDistanceToNow","aria-label","defaultValue","TaskList","todos","items","val","filter","item","filterValue","map","Filters","onFilterClick","changeFilter","dataset","role","data-value","Footer","todoCount","clearComplete","App","currentId","todoData","createTodoItem","text","newItem","idx","findIndex","oldItem","slice","Date","Math","floor","random","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c694c6f1.chunk.js","sourcesContent":["import Header from './header';\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './header.css';\n\nexport default class Header extends Component {\n  static propTypes = {\n    addItem: PropTypes.func.isRequired,\n  };\n\n  state = {\n    label: '',\n  };\n\n  onLabelChange = (event) => {\n    this.setState({\n      label: event.target.value,\n    });\n  };\n\n  onKeyDown = (event) => {\n    const { label } = this.state;\n    const { addItem } = this.props;\n    if (event.code === 'Enter') {\n      if (label !== '') {\n        addItem(label);\n        this.setState({\n          label: '',\n        });\n      }\n    }\n  };\n\n  render() {\n    const { label } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.onLabelChange}\n          onKeyDown={this.onKeyDown}\n          value={label}\n        />\n      </header>\n    );\n  }\n}\n","const values = {\n  filters: {\n    all: 'All',\n    active: 'Active',\n    completed: 'Completed',\n  },\n};\n\nexport default values;\n","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport PropTypes from 'prop-types';\nimport './task.css';\n\nconst classNames = require('classnames');\n\nconst Task = ({ label, addingDate, id, done, editing, itemDestroy, onToggleDone, itemEdit }) => {\n  const taskClass = classNames({\n    '': true,\n    'completed': done,\n    'editing': editing,\n  });\n\n  return (\n    <li className={taskClass}>\n      <div className=\"view\">\n        <input className=\"toggle\" type=\"checkbox\" checked={done} onClick={() => onToggleDone(id)} />\n        <label>\n          <span className=\"description\">{label}</span>\n          <span className=\"created\">{formatDistanceToNow(addingDate)}</span>\n        </label>\n        <button type=\"button\" aria-label=\"Edit\" className=\"icon icon-edit\" onClick={() => itemEdit(id)} />\n        <button type=\"button\" aria-label=\"Delete\" className=\"icon icon-destroy\" onClick={() => itemDestroy(id)} />\n      </div>\n      {editing ? <input type=\"text\" className=\"edit\" defaultValue={label} /> : null}\n    </li>\n  );\n};\n\nTask.propTypes = {\n  label: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  done: PropTypes.bool.isRequired,\n  editing: PropTypes.bool.isRequired,\n  addingDate: PropTypes.instanceOf(Date).isRequired,\n  itemDestroy: PropTypes.func.isRequired,\n  onToggleDone: PropTypes.func.isRequired,\n  itemEdit: PropTypes.func.isRequired,\n};\n\nexport default Task;\n","import Task from './task';\n\nexport default Task;\n","import TaskList from './task-list';\n\nexport default TaskList;\n","import React from 'react';\nimport './task-list.css';\nimport PropTypes from 'prop-types';\nimport values from '../../helpers/values';\n\nimport Task from '../task';\n\nconst TaskList = ({ todos, itemDestroy, onToggleDone, itemEdit, filterValue }) => {\n  const filter = (val) => {\n    switch (val) {\n      case values.filters.active:\n        return todos.filter((item) => !item.done);\n\n      case values.filters.completed:\n        return todos.filter((item) => item.done);\n\n      default:\n        return todos;\n    }\n  };\n\n  const filteredArr = filter(filterValue);\n\n  const items = filteredArr.map((item) => {\n    const { id, ...props } = item;\n\n    return (\n      <Task\n        key={id}\n        id={id}\n        {...props}\n        itemDestroy={() => itemDestroy(id)}\n        onToggleDone={() => onToggleDone(id)}\n        itemEdit={() => itemEdit(id)}\n      />\n    );\n  });\n\n  return <ul className=\"todo-list\">{items}</ul>;\n};\n\nTaskList.propTypes = {\n  todos: PropTypes.instanceOf(Array).isRequired,\n  itemDestroy: PropTypes.func.isRequired,\n  onToggleDone: PropTypes.func.isRequired,\n  itemEdit: PropTypes.func.isRequired,\n  filterValue: PropTypes.string.isRequired,\n};\n\nexport default TaskList;\n","import Filters from './filters';\n\nexport default Filters;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport values from '../../helpers/values';\n\nimport './filters.css';\n\nexport default class Filters extends Component {\n  static propTypes = {\n    filterValue: PropTypes.string.isRequired,\n    changeFilter: PropTypes.func.isRequired,\n  };\n\n  onFilterClick = (event) => {\n    const { changeFilter } = this.props;\n    changeFilter(event.target.dataset.value);\n  };\n\n  render() {\n    const { filterValue } = this.props;\n\n    return (\n      <ul className=\"filters\" onClick={this.onFilterClick} onKeyDown={() => {}} role=\"presentation\">\n        <li>\n          <button\n            type=\"button\"\n            className={filterValue === values.filters.all ? 'selected' : ''}\n            data-value={values.filters.all}\n          >\n            All\n          </button>\n        </li>\n        <li>\n          <button\n            type=\"button\"\n            className={filterValue === values.filters.active ? 'selected' : ''}\n            data-value={values.filters.active}\n          >\n            Active\n          </button>\n        </li>\n        <li>\n          <button\n            type=\"button\"\n            className={filterValue === values.filters.completed ? 'selected' : ''}\n            data-value={values.filters.completed}\n          >\n            Completed\n          </button>\n        </li>\n      </ul>\n    );\n  }\n}\n","import Footer from './footer';\n\nexport default Footer;\n","import React from 'react';\nimport './footer.css';\nimport PropTypes from 'prop-types';\n\nimport Filters from '../filters';\n\nconst Footer = ({ todoCount, clearComplete, changeFilter, filterValue }) => {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{todoCount} items left</span>\n      <Filters changeFilter={changeFilter} filterValue={filterValue} />\n      <button type=\"button\" className=\"clear-completed\" onClick={() => clearComplete()}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todoCount: PropTypes.number.isRequired,\n  clearComplete: PropTypes.func.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n  filterValue: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import App from './app';\n\nexport default App;\n","import React, { Component } from 'react';\n\nimport './app.css';\n\nimport Header from '../header';\nimport TaskList from '../task-list';\nimport Footer from '../footer';\n\nexport default class App extends Component {\n  currentId = 100;\n\n  state = {\n    todoData: [\n      this.createTodoItem('Добавить задачу'),\n      this.createTodoItem('Отметить задачу'),\n      this.createTodoItem('Удалить задачу'),\n    ],\n    filterValue: 'All',\n  };\n\n  changeFilter = (filter) => {\n    this.setState(() => {\n      return {\n        filterValue: filter,\n      };\n    });\n  };\n\n  addItem = (text) => {\n    const newItem = this.createTodoItem(text);\n\n    this.setState(({ todoData }) => {\n      const newArr = [...todoData, newItem];\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  itemDestroy = (id) => {\n    this.setState(({ todoData }) => {\n      const result = todoData.filter((item) => {\n        return item.id !== id;\n      });\n      return {\n        todoData: result,\n      };\n    });\n  };\n\n  // fintItemInData = (id) => {\n  //   const { todoData } = this.state;\n  //   const idx = todoData.findIndex((item) => item.id === id);\n  //   const oldItem = todoData[idx];\n\n  //   return {\n  //     idx,\n  //     oldItem\n  //   };\n  // }\n\n  itemEdit = (id) => {\n    this.setState(({ todoData }) => {\n      const idx = todoData.findIndex((item) => item.id === id);\n      const oldItem = todoData[idx];\n      const newItem = { ...oldItem, editing: !oldItem.editing };\n\n      const newArr = [...todoData.slice(0, idx), newItem, ...todoData.slice(idx + 1)];\n\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  clearComplete = () => {\n    this.setState(({ todoData }) => {\n      const newArr = todoData.filter((item) => !item.done);\n\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  onToggleDone = (id) => {\n    this.setState(({ todoData }) => {\n      const idx = todoData.findIndex((item) => item.id === id);\n      const oldItem = todoData[idx];\n      const newItem = { ...oldItem, done: !oldItem.done };\n      const newArr = [...todoData.slice(0, idx), newItem, ...todoData.slice(idx + 1)];\n      return {\n        todoData: newArr,\n      };\n    });\n  };\n\n  createTodoItem(label) {\n    return {\n      label,\n      addingDate: new Date(),\n      id: this.currentId + Math.floor(Math.random() * 100),\n      done: false,\n      editing: false,\n    };\n  }\n\n  render() {\n    const { todoData, filterValue } = this.state;\n    const todoCount = todoData.length - todoData.filter((item) => item.done).length;\n\n    return (\n      <section className=\"todoapp\">\n        <Header addItem={this.addItem} />\n        <section className=\"main\">\n          <TaskList\n            todos={todoData}\n            filterValue={filterValue}\n            itemDestroy={this.itemDestroy}\n            onToggleDone={this.onToggleDone}\n            itemEdit={this.itemEdit}\n          />\n        </section>\n        <Footer\n          todoCount={todoCount}\n          clearComplete={this.clearComplete}\n          changeFilter={this.changeFilter}\n          filterValue={filterValue}\n        />\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}